{"version":3,"sources":["app/components/user-card/userCard.js","app/components/info-card/infoCard.js","app/components/create-user-modal/createUserModal.js","app/components/create-info-modal/createInfoModal.js","app/views/user-list/userList.js","app/views/user-club/userClub.js","App.js","serviceWorker.js","index.js"],"names":["UserCard","user","number","to","clubName","div","initial","opacity","animate","transition","duration","delay","className","email","meetingTime","InfoCard","info","title","href","link","CreateUserModal","onCreate","onCancel","useState","setClubName","setMeetingTime","setEmail","errorMessage","setErrorMessage","event","a","preventDefault","newUser","axios","post","createdUser","status","data","onSubmit","type","onChange","target","value","required","onClick","id","CreateInfoModal","setTitle","setLink","newInfo","createdInfo","UserList","users","setUsers","showModal","setShowModal","getUserList","get","console","log","useEffect","size","color","map","index","key","UserClub","setInfo","selectedClubName","useParams","getInfoList","i","length","window","history","back","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e425010a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./userCard.scss\";\n\nimport { Link } from \"react-router-dom\";\nimport { motion } from \"framer-motion\"\n\nfunction UserCard({ user, number }) {\n  return (\n    <Link to={\"/club/\" + user.clubName}>\n      <motion.div \n        initial={{ opacity: 0 }}\n        animate={{\n          opacity: [0, 1],\n        }}\n        transition={{\n          duration: 0.2,\n          delay: number * 0.1\n        }}\n      className=\"user-card\">\n        <div className=\"tag\">\n          <h1>{number}</h1>\n        </div>\n        <h2>\n          {user.clubName}\n        </h2>\n        <h3>{user.email}</h3>\n        <h4>{user.meetingTime}</h4>\n      </motion.div>\n    </Link>\n  );\n}\n\nexport default UserCard;\n\n","import React from \"react\";\nimport \"./infoCard.scss\";\n\nimport { Link } from \"react-router-dom\";\nimport { motion } from \"framer-motion\"\n\nfunction InfoCard({ info, number }) {\n  return (\n      <motion.div \n        initial={{ opacity: 0 }}\n        animate={{\n          opacity: [0, 1],\n        }}\n        transition={{\n          duration: 0.2,\n          delay: number * 0.1\n        }}\n      className=\"info-card\">\n        <div className=\"tag\">\n        </div>\n        <h2>\n          {info.title}\n        </h2>\n        <a href={info.link}>{info.link}</a>\n\n        {/* <h4>{user.link}</h4> */}\n      </motion.div>\n  );\n}\n\nexport default InfoCard;\n\n","import React, { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport axios from \"axios\";\nimport \"./createUserModal.scss\"\n\n// stocks is object with the keys: companyName, symbol, id\nfunction CreateUserModal({ onCreate, onCancel }) {\n    const [clubName, setClubName] = useState(\"\");\n    const [meetingTime, setMeetingTime] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    // const [selectedStockId, setSelectedStockId] = useState(stocks[0]._id);\n\n    async function handleSubmit(event) {\n        event.preventDefault(); // stops the default action belonging to the event from occuring\n        // in this case, it stops the submit button from submitting the form\n\n        const newUser = {\n            clubName: clubName,\n            email: email,\n            meetingTime: meetingTime,\n            // FIXED favoriteStockId: selectedStockId\n        }\n\n        // Create new user by sending a POST request to the backend \n        const createdUser = await axios.post(\"https://zotclubs.herokuapp.com/club\", newUser);\n\n        if (createdUser.status === 200 && createdUser.data) {// User successfully created - go back to main page\n            setErrorMessage(\"\");\n            onCreate();// hides modal and refreshes user list (passed in from the parent component (mainPage) so we can alter its state)\n        }\n        else {\n            setErrorMessage(\"Failed to create user\");\n        }\n    }\n\n    // stocks is object with the keys: companyName, symbol, id\n    /*\n        {\n            _id: 123,\n            companyName : Apple, \n            symbol: AAPL, \n        }\n    */\n\n    // Returns an array of <option> created using information from passed in stocks property\n    // This will be used to create the dropdown in the modal\n    // function renderStockOptions() {\n    //     const options = stocks.map(function (stock) {\n    //         return <option key={stock._id} value={stock._id}>{stock.companyName + \"(\" + stock.symbol + \")\"}</option>\n    //     });\n    //     return options;\n    // }\n\n    return (\n        <motion.div\n            animate={{\n                opacity: [0, 1],\n            }}\n            transition={{\n                duration: 0.5,\n            }}\n            className=\"selected-stock flex-center\"\n        >\n            <form className=\"myForm\" onSubmit={handleSubmit}>\n                <label>Club Name</label>\n                <input type=\"text\" onChange={(event) => setClubName(event.target.value)} required />\n                \n                <label>Email</label>\n                <input type=\"email\" onChange={(event) => setEmail(event.target.value)} />\n\n                <label>Meeting Time</label>\n                <input type=\"text\" onChange={(event) => setMeetingTime(event.target.value)} required />\n                \n                <input className=\"button\" type=\"submit\" value=\"Create Club\" />\n                <button className=\"button\" type=\"button\" onClick={onCancel}>Cancel</button>\n                <p id=\"error-message\">{errorMessage}</p>\n            </form>\n        </motion.div >\n\n    );\n}\n\nexport default CreateUserModal;","import React, { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport axios from \"axios\";\nimport \"./createInfoModal.scss\"\n\nfunction CreateInfoModal({ clubName, onCreate, onCancel }) {\n    const [title, setTitle] = useState(\"\");\n    const [link, setLink] = useState(\"\");\n\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n\n    async function handleSubmit(event) {\n        event.preventDefault(); // stops the default action belonging to the event from occuring\n        // in this case, it stops the submit button from submitting the form\n\n        const newInfo = {\n            clubName: clubName,\n            title: title,\n            link: link,\n        }\n\n        // Create new user by sending a POST request to the backend \n        const createdInfo = await axios.post(\"https://zotclubs.herokuapp.com/club-info\", newInfo);\n\n        if (createdInfo.status === 200 && createdInfo.data) {// User successfully created - go back to main page\n            setErrorMessage(\"\");\n            onCreate();// hides modal and refreshes user list (passed in from the parent component (mainPage) so we can alter its state)\n        }\n        else {\n            setErrorMessage(\"Failed to create club info\");\n        }\n    }\n\n    // Returns an array of <option> created using information from passed in stocks property\n    // This will be used to create the dropdown in the modal\n    // function renderStockOptions() {\n    //     const options = stocks.map(function (stock) {\n    //         return <option key={stock._id} value={stock._id}>{stock.companyName + \"(\" + stock.symbol + \")\"}</option>\n    //     });\n    //     return options;\n    // }\n\n    return (\n        <motion.div\n            animate={{\n                opacity: [0, 1],\n            }}\n            transition={{\n                duration: 0.5,\n            }}\n            className=\"selected-stock flex-center\"\n        >\n            <form className=\"myForm\" onSubmit={handleSubmit}>\n                <label>Socials</label>\n                <input type=\"text\" onChange={(event) => setTitle(event.target.value)} required />\n                \n                <label>Social Link</label>\n                <input type=\"text\" onChange={(event) => setLink(event.target.value)} />\n                \n                <input className=\"button\" type=\"submit\" value=\"Create Info\" />\n                <button className=\"button\" type=\"button\" onClick={onCancel}>Cancel</button>\n                <p id=\"error-message\">{errorMessage}</p>\n            </form>\n        </motion.div >\n\n    );\n}\n\nexport default CreateInfoModal;","import React, { useState, useEffect } from \"react\";\nimport \"./userList.scss\";\n\nimport axios from \"axios\"\n\nimport { UserCard } from \"app/components\";\nimport { CreateUserModal } from \"app/components\";\n\nfunction UserList() {\n\n  // List of users from the database\n  const [users, setUsers] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n\n  // Get the list of users from the database upon page load\n  useEffect(() => {\n    getUserList();\n  }, []);\n\n  // Get the list of users through a GET request to the backend API\n  async function getUserList() {\n    let users = await axios.get(\"https://zotclubs.herokuapp.com/club\");\n    \n    // If we get a valid response, set the state object, or print an error.\n    if (users.status === 200) {\n      console.log(users)\n      setUsers(users.data.data);\n    } else {\n      console.log(\"Error retrieving users\");\n    }\n  }\n\n   // This function will be passed into the CreateUserModal child component\n  // This will allow CreateUserModal to manipulate the state of the mainPage to hide itself and refresh the user list\n  function refreshPage() {\n    setShowModal(false);\n    getUserList();\n  }\n\n  return (\n    <div>\n      <div className=\"user-list\">\n        <p><font size=\"1100\" color=\"white\">Zot Zeus</font></p>\n      </div>\n      \n      <div className={showModal ? \"blur\" : \"\"}>\n        <div className=\"user-list\">\n          {(users || []).map(function (user, index) {\n            return <UserCard user={user} key={index} number={index + 1} />;\n          })}\n        </div>\n\n        <button className=\"button\" onClick={() => setShowModal(true)}>Create New Club</button>\n      </div>\n\n      {/* This ternary operator returns the CreateUserModal if showModal = true, else returns null => nothing will be rendered */}\n\n      { showModal ?\n        <CreateUserModal\n          onCancel={() => setShowModal(false)}\n          onCreate={refreshPage}\n        />\n        : null\n      }\n\n    </div>\n  );\n}\n\nexport default UserList;\n\n\n\n\n","import React, { useState, useEffect } from \"react\";\nimport \"./userClub.scss\";\n\nimport axios from \"axios\"\n\nimport { UserCard } from \"app/components\";\nimport { InfoCard } from \"app/components\";\nimport { CreateInfoModal } from \"app/components\";\nimport { CreateUserModal } from \"app/components\";\nimport{ useParams } from 'react-router-dom';\n\nfunction UserClub() {\n\n  // List of users from the database\n  const [info, setInfo] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n  let { selectedClubName } = useParams();\n  \n  // Get the list of users from the database upon page load\n  useEffect(() => {\n    getInfoList();\n  }, []);\n\n  // Get the list of users through a GET request to the backend API\n  async function getInfoList() {\n    let info = await axios.get(\"https://zotclubs.herokuapp.com/club-info\");\n    \n    \n    // If we get a valid response, set the state object, or print an error.\n    if (info.status === 200) {\n      console.log(info);\n\n      for (let i = 0; i < info.data.data.length; i++) {\n        \n\n        if(info.data.data[i][\"clubName\"] != selectedClubName) {\n              delete info.data.data[i];\n          }\n      }\n\n      setInfo(info.data.data);\n\n\n    } else {\n      console.log(\"Error retrieving info\");\n    }\n  }\n\n   // This function will be passed into the CreateUserModal child component\n  // This will allow CreateUserModal to manipulate the state of the mainPage to hide itself and refresh the user list\n  function refreshPage() {\n    setShowModal(false);\n    getInfoList();\n  }\n\n  function goBack() {\n      window.history.back()\n  }\n\n  return (\n    <div>\n      \n      <div className=\"user-list\">\n        <p><font size=\"1100\" color=\"white\">{selectedClubName}</font></p>\n      </div>\n      \n      <div className={showModal ? \"blur\" : \"\"}>\n        <div className=\"user-list\">\n          {(info || []).map(function (info, index) {\n            return <InfoCard info={info} key={index} number={index + 1} />;\n          })}\n        </div>\n\n        <button className=\"button\" onClick={() => setShowModal(true)}>Create New Club Info</button>\n        <button className=\"button\" onClick={() => goBack()}>Back</button>\n      </div>\n\n      {/* This ternary operator returns the CreateUserModal if showModal = true, else returns null => nothing will be rendered */}\n\n      { showModal ?\n        <CreateInfoModal\n          clubName = {selectedClubName}\n          onCancel={() => setShowModal(false)}\n          onCreate={refreshPage}\n        />\n        : null\n      }\n\n    </div>\n  );\n}\n\nexport default UserClub;\n","// React and CSS Imports\nimport React from \"react\";\nimport \"./App.scss\";\nimport \"globals/hack-styles.scss\";\nimport '../node_modules/react-vis/dist/style.css';\n\n// Installed dependency imports\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\n\n// Website imports for classes you made\nimport { UserList, UserClub } from \"app/views\";\n\nfunction App() {\n  return (\n    <div className=\"app fill-view\">\n      <Router>\n        <Switch>\n          <Route \n            exact path={\"/\"}\n            component={UserList}\n          />\n          <Route \n            exact path={\"/club/:selectedClubName\"}\n            component={UserClub}\n          />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}